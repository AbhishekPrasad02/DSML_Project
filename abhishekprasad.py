# -*- coding: utf-8 -*-
"""AbhishekPrasad

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zwAbZmx42zazrZq7q0MUA4kcy7Kk5Feo
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

df=pd.read_csv("/content/Copy of stocknet_tst_data.csv")
df.fillna(0, inplace=True)
df.isnull().sum()

t=pd.read_csv("/content/Copy of stocknet_trn_data_targets.csv")
new_row = {'d1': 'd1', '75.650002': 75.650002}

# Add the new row at the beginning of the DataFrame using the loc method
t.loc[-1] = new_row
t.index = t.index + 1
t = t.sort_index()  
t.rename(columns = {'d1': 'date', '75.650002':'Closing Price'}, inplace = True)
t.fillna(0, inplace=True)
t.isnull().sum()

from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import KFold
param_grid = {
    'n_estimators': [100, 200,300],
    'max_depth': [ 7, 9,11],
    'min_samples_leaf': [2, 3, 4],
    'min_samples_split': [6, 8, 10],
    #'max_features' : [12, 15, 18]
    }
from sklearn.model_selection import GridSearchCV
grid_search = GridSearchCV(RandomForestRegressor(),
                           param_grid=param_grid)
grid_search.fit(X_train, y_train)
print(grid_search.best_estimator_)

mse_scores = -cross_val_score(rfg, X_train, y_train, cv=kf, scoring='neg_mean_squared_error')
mse_mean = np.mean(mse_scores)

# Calculate the R-squared score of the model
rfgr2 = r2_score(y_test, y_pred)

# Print the performance metrics of the model
print('MSE:', mse_mean)
print("R-squared:", rfgr2)

param_grid = {
    'kernel': ['linear','poly', 'rbf', 'sigmoid'],
    'C': [1.0,1.5,2.0],
    'gamma': [0.1, 1, 'scale', 'auto'],
    'epsilon': [0.01, 0.02, 0.025]
}
grid_search = GridSearchCV(SVR(),
                           param_grid=param_grid)
grid_search.fit(X_train, y_train)
print(grid_search.best_estimator_)

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
mse_scores = -cross_val_score(svr, X_train, y_train, cv=kf, scoring='neg_mean_squared_error')
mse_mean = np.mean(mse_scores)


svmr2=r2_score(y_test,y_pred)

print("R2 score:", svmr2)
print("MSE:", mse_mean)

pipe = Pipeline([
    ('scaler', MinMaxScaler()),
    ('regressor', LinearRegression())
])
mse_scores = -cross_val_score(pipe, X_train, y_train, cv=10, scoring='neg_mean_squared_error')
mse_mean=np.mean(mse_scores)



linr2 = r2_score(y_test, y_pred)
print("R-squared:", linr2)
# Print the performance metrics of the model
print('MSE:', mse_mean)

df['average']=(df['High']+df["Low"])/2
MSE=((df['average']-t['Closing Price'])*(df['average']-t['Closing Price']))/len(df[average])
MSE